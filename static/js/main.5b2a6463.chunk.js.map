{"version":3,"sources":["Network.js","Handle.js","Axis.js","DataManager.js","App.js","serviceWorker.js","index.js"],"names":["selected","selectedId","selectedNodeValues","xScale","d3","domain","range","window","screen","width","clamp","h1","h2","tempH1","tempH2","trueYear1","trueYear2","Handle","props","state","handle","classNames","sliderType","data","initialValue1","initialValue2","this","setState","initialValue","circle","r","fill","className","transform","onMouseOver","bind","prevProps","prevState","mouseValue","trueMouseValue","margins","svgDimensions","onChangeYear","self","left","right","drag","on","getTrueMouseValue","attr","rangeBarFilled","remove","sliderGroup","insert","console","log","invert","Math","round","call","React","Component","Axis","renderAxis","axisElement","scale","ticks","tickFormat","selectAll","style","select","ref","el","DataManager","source_path","ego","start","end","threshold","source","require","people","nodes","links","max_count","Number","MIN_SAFE_INTEGER","min_count","MAX_SAFE_INTEGER","max_year","min_year","displayed_nodes","index","person","years","message_distance","message_count","Object","keys","forEach","year","current_year","parseInt","push","id","name","relationship","cluster","i","length","cur","distance","source_links","JSON","parse","stringify","filtered_source_links","indexOf","target","concat","Network","year1","year2","init_thresh","createNetwork","node","thresh","temp_ego","generateNodes","margin","height","svg","append","link","enter","d","setColour","messages","setRelationship","isNaN","floor","alert","undefined","active","simulation","alphaTarget","restart","fx","x","fy","y","force","strength","info","top","bottom","RangeBar","x1","y1","x2","y2","RangeBarFilled","document","getElementById","onChangeThreshold","sliderClassNames","rangeBar","position","sliderSvg","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b2a6463.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './App.css'\r\nimport * as d3 from \"d3\";\r\n\r\nimport Handle from './Handle'\r\nimport Axis from './Axis'\r\nimport DataManager from './DataManager'\r\n\r\n// const data = require('./data.json');\r\nconst source_path = './source.json';\r\nvar selected;\r\nvar selectedId;\r\nvar selectedNodeValues;\r\nclass Network extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.year1 = 2011;\r\n        this.year2 = 2015\r\n        this.init_thresh = 0.5\r\n    }\r\n    componentDidMount() {\r\n        Network.createNetwork(this.year1, this.year2, this.init_thresh);\r\n    }\r\n    componentDidUpdate() {\r\n        Network.createNetwork();\r\n    }\r\n\r\n    static setRelationship(node){\r\n        switch(node.cluster){\r\n            case \"0\":\r\n                return \"Colleague\";\r\n            case \"1\":\r\n                return \"Acquaintance\";\r\n            case \"2\":\r\n                return \"Friend\";\r\n            case \"3\":\r\n                return \"Family\";\r\n            default:\r\n                return \"Unknown\";\r\n        }\r\n    }\r\n\r\n    static setColour(node){\r\n        switch(node.cluster){\r\n            case \"0\":\r\n                return \"#B98BF4\";\r\n            case \"1\":\r\n                return \"#876BD3\";\r\n            case \"2\":\r\n                return \"#592E83\";\r\n            case \"3\":\r\n                return \"#3C224F\";\r\n            default:\r\n                return \"#e4d2f9\";\r\n        }\r\n    }\r\n\r\n  static createNetwork(year1, year2, thresh) {\r\n        const clicked = \"#DC143C\";\r\n        const egoColour = \"#fa7070\";\r\n        const egoId = -1;\r\n      \r\n        // TODO: don't hardcode this\r\n        let temp_ego = {\r\n            \"id\": egoId,\r\n            \"name\": \"chris\",\r\n            \"relationship\": \"owner\"\r\n        };\r\n\r\n        let data = DataManager.generateNodes(source_path, temp_ego, year1, year2, thresh);\r\n\r\n        // set the dimensions and margins of the graph\r\n        var margin = {top: 50, right: 50, bottom: 50, left: 50},\r\n            width = 800 - margin.left - margin.right,\r\n            height = 600 - margin.top - margin.bottom;\r\n\r\n// append the svg object to the body of the page\r\n        var svg = d3.select(\"#visualisation\")\r\n            .append(\"svg\")\r\n            .attr(\"class\", \"network\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        // Initialize the links\r\n        var link = svg\r\n            .selectAll(\"line\")\r\n            .data(data.links)\r\n            .enter()\r\n            .append(\"line\")\r\n            .style(\"stroke\", \"#aaa\");\r\n\r\n        // Initialize the nodes\r\n        var node = svg\r\n            .selectAll(\"circle\")\r\n            .data(data.nodes)\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"id\",function(d){\r\n                return d.id;\r\n            })\r\n            .style(\"fill\",function(d){\r\n                if(selectedId === d.id){\r\n                    return clicked;\r\n                } else if(d.id !== egoId){\r\n                    return Network.setColour(d);\r\n                } else {\r\n                    return egoColour;\r\n                }\r\n            })\r\n            .on(\"dblclick\",function(d){\r\n                if(d.id !== egoId){\r\n                    d3.select(selected).style(\"fill\",Network.setColour(selectedNodeValues));\r\n                    selected = this;\r\n                    selectedNodeValues = d;\r\n                    selectedId = d.id;\r\n                    d3.select(this).style(\"fill\",clicked);\r\n                }\r\n                // var messages = 0;\r\n                // for(var i = 0; i < data.links.length; i++)\r\n                // {\r\n                //     if(data.links[i].target.id === d.id)\r\n                //     {\r\n                //         messages = data.links[i].message_count;\r\n                //     }\r\n                // }\r\n                var messages = d.message_count ? d.message_count : 0;\r\n                var relationship = Network.setRelationship(d);\r\n                messages = isNaN(Math.floor(messages)) ? 0 : Math.floor(messages);\r\n                alert(\"Name: \" + d.name + \"\\nRelationship: \" + relationship + \"\\nMessages Sent: \" + messages);\r\n            })\r\n            .on(\"click\",function(d){\r\n                console.log(d);\r\n                console.log(this);\r\n                if(d.id !== egoId){\r\n                    console.log(\"SELECTED: \" + selected);\r\n                    console.log(\"SELECTED ID: \" + selectedId);\r\n                    if(selectedNodeValues !== undefined) d3.select(selected).style(\"fill\",Network.setColour(selectedNodeValues));\r\n                    selected = this;\r\n                    selectedNodeValues = d;\r\n                    selectedId = d.id;\r\n                    return d3.select(this).style(\"fill\",clicked);\r\n                } else {\r\n                    return egoColour;\r\n                }\r\n            })\r\n            .attr(\"r\", 10)\r\n            .call(d3.drag()\r\n                .on(\"start\", dragstarted)\r\n                .on(\"drag\", dragged)\r\n                .on(\"end\", dragended));\r\n\r\n\r\n        // var label = node.append(\"text\")\r\n        //     .attr(\"dy\", \".35em\")\r\n        //     .text(function (d) { return d.name; });\r\n\r\n        // Let's list the force we wanna apply on the network\r\n        var simulation = d3.forceSimulation(data.nodes)                 // Force algorithm is applied to data.nodes\r\n            .force(\"link\", d3.forceLink()\r\n                .distance(function(d){return d.distance/1.5;}) // This force provides links between nodes\r\n                .id(function(d) {return d.id;})\r\n                .links(data.links)                                   // and this the list of links\r\n            )\r\n            .force(\"charge\", d3.forceManyBody().strength(-100))         // This adds repulsion between nodes. Play with the -400 for the repulsion strength\r\n            .force(\"center\", d3.forceCenter(width / 2, height / 2))     // This force attracts nodes to the center of the svg area\r\n            .on(\"tick\", ticked);\r\n\r\n        // This function is run at each iteration of the force algorithm, updating the nodes position.\r\n        function ticked() {\r\n            link\r\n                .attr(\"x1\", function(d) { return d.source.x; })\r\n                .attr(\"y1\", function(d) { return d.source.y; })\r\n                .attr(\"x2\", function(d) { return d.target.x; })\r\n                .attr(\"y2\", function(d) { return d.target.y; });\r\n\r\n            node\r\n                .attr(\"cx\", function (d) { return d.x; })\r\n                .attr(\"cy\", function(d) { return d.y; });\r\n        }\r\n\r\n        function dragstarted(d) {\r\n            if (!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n        }\r\n\r\n        function dragged(d) {\r\n            d.fx = d3.event.x;\r\n            d.fy = d3.event.y;\r\n        }\r\n\r\n        function dragended(d) {\r\n            if (!d3.event.active) simulation.alphaTarget(0);\r\n            d.fx = null;\r\n            d.fy = null;\r\n        }\r\n\r\n        function onChangeYear(trueYear1, trueYear2) {\r\n            // delete current network\r\n            d3.select(\".network\").remove()\r\n            Network.createNetwork(trueYear1, trueYear2, thresh)\r\n            selected = document.getElementById(selectedId);\r\n            year1 = trueYear1;\r\n            year2 = trueYear2;\r\n        }\r\n        function onChangeThreshold(trueYear1, trueYear2) {\r\n            // delete current network\r\n            d3.select(\".network\").remove()\r\n            Network.createNetwork(year1, year2, trueYear2)\r\n            selected = document.getElementById(selectedId);\r\n            thresh = trueYear2;\r\n        }\r\n\r\n        const RangeSlider = ({ info, onChangeYear }) => {\r\n            info = {\r\n                initialValue1: 2011,\r\n                initialValue2: 2015\r\n            };\r\n            const sliderClassNames = {\r\n                \"sliderSvg\": \"rangeSliderSvg\",\r\n                \"sliderGroup\": \"rangeSliderGroup\",\r\n                \"rangeBar\": \"rangeBar\",\r\n                \"rangeBarFilled\": \"rangeBarFilled\"\r\n            };\r\n            const axisClassNames = {\r\n                \"axis\": \"rangeSliderAxis\"\r\n            };\r\n\r\n            const margins = { top: 20, right: 100, bottom: 20, left: 100 },\r\n                svgDimensions = { width: window.screen.width / 2, height: window.screen.height / 6 };\r\n\r\n            const xScale = d3.scaleLinear()\r\n                .domain([data.min_year, data.max_year])\r\n                .range([margins.left, svgDimensions.width - margins.right])\r\n                .clamp(true);\r\n            \r\n            const RangeBar = <line x1={margins.left} y1=\"0\" x2={svgDimensions.width - margins.right} y2=\"0\" className=\"rangeBar\" />\r\n            const RangeBarFilled = <line x1={xScale(info.initialValue1)} y1=\"0\" x2={xScale(info.initialValue2)} y2=\"0\" className=\"rangeBarFilled\" />\r\n\r\n            return <div>\r\n                <div className=\"slider_title\">Year Slider</div>\r\n                <svg className=\"rangeSliderSvg\" width={svgDimensions.width} height={svgDimensions.height}>\r\n                <g className=\"rangeSliderGroup\" transform={`translate(0,${svgDimensions.height - margins.bottom - 40})`}>\r\n                    {RangeBar}{RangeBarFilled}\r\n                    <Axis margins={margins} svgDimensions={svgDimensions} xScale={xScale} classNames={axisClassNames} />\r\n                    <Handle onChangeYear={onChangeYear} handle=\"handle2\" \r\n                        initialValue={info.initialValue2} data={info} xScale={xScale} \r\n                        margins={margins} svgDimensions={svgDimensions} \r\n                        classNames={sliderClassNames} />\r\n                </g>\r\n                </svg>\r\n            </div>;\r\n        }\r\n\r\n        const ThresholdSlider = ({ data, onChangeThreshold }) => {\r\n            data = {\r\n                initialValue1: 0,\r\n                initialValue2: thresh\r\n            }\r\n\r\n            const sliderClassNames = {\r\n                \"sliderSvg\": \"thresholdSliderSvg\",\r\n                \"sliderGroup\": \"thresholdSliderGroup\",\r\n                \"rangeBar\": \"thresholdBar\",\r\n                \"rangeBarFilled\": \"thresholdBarFilled\"\r\n            };\r\n            const sliderType = \"cont\";\r\n\r\n            const margins = { top: 20, right: 100, bottom: 20, left: 100 },\r\n                svgDimensions = { width: window.screen.width / 2, height: window.screen.height / 6 };\r\n            const xScale = d3.scaleLinear()\r\n                .domain([0, 1])\r\n                .range([margins.left, svgDimensions.width - margins.right])\r\n                .clamp(false);\r\n\r\n            const RangeBar = <line x1={margins.left} y1=\"0\" x2={svgDimensions.width - margins.right} y2=\"0\" className={sliderClassNames.rangeBar} />\r\n            const RangeBarFilled = <line x1={xScale(data.initialValue1)} y1=\"0\" x2={xScale(data.initialValue2)} y2=\"0\" className={sliderClassNames.rangeBarFilled}/>\r\n\r\n            return <div style={{top: \"-46px\", position: \"relative\"}}> \r\n                <div className=\"slider_title\">Alter Similarity Threshold</div>\r\n                <svg className={sliderClassNames.sliderSvg} width={svgDimensions.width} height={svgDimensions.height}>\r\n                <g className={sliderClassNames.sliderGroup} transform={`translate(0,${svgDimensions.height - margins.bottom - 40})`}>\r\n                    {RangeBar}{RangeBarFilled}\r\n                    <Axis margins={margins} svgDimensions={svgDimensions} xScale={xScale} />\r\n                    <Handle onChangeYear={onChangeThreshold} handle=\"handle3\" \r\n                    initialValue={data.initialValue2} data={data} xScale={xScale} \r\n                        margins={margins} svgDimensions={svgDimensions} classNames={sliderClassNames}\r\n                        sliderType={sliderType} />\r\n                </g>\r\n                </svg>\r\n            </div>;\r\n        };\r\n        \r\n        // return <RangeSlider onChangeYear={onChangeYear} />;\r\n        return (\r\n            <div className=\"test\">\r\n                <RangeSlider onChangeYear={onChangeYear} />\r\n                <ThresholdSlider onChangeThreshold={onChangeThreshold} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    render() {\r\n        return Network.createNetwork(2012, 2019, 0.5);\r\n    }\r\n}\r\nexport default Network","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport * as d3 from \"d3\";\r\n\r\nlet xScale = d3.scaleLinear()\r\n    .domain([2012, 2017])\r\n    .range([50, window.screen.width / 2 - 50])\r\n    .clamp(true);\r\nlet h1 = xScale(2011), h2 = xScale(2015);\r\nlet tempH1 = xScale(2011), tempH2 = xScale(2015);\r\nlet trueYear1 = 2011, trueYear2 = 2015;\r\n\r\nclass Handle extends React.Component {\r\n    // https://codepen.io/bimalgrg519/details/WEwLgQ\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            handle: '',\r\n            classNames: this.props.classNames,\r\n            sliderType: this.props.sliderType\r\n        }\r\n        let data = this.props.data;\r\n        xScale = this.props.xScale;\r\n        h1 = xScale(data.initialValue1);\r\n        h2 = xScale(data.initialValue2);\r\n\r\n        tempH1 = xScale(data.initialValue1);\r\n        tempH2 = xScale(data.initialValue2);\r\n\r\n        trueYear1 = data.initialValue1;\r\n        trueYear2 = data.initialValue2;\r\n    }\r\n    onMouseOver() {\r\n        this.setState({\r\n            handle: this.props.handle\r\n        });\r\n    }\r\n    render() {\r\n        const { initialValue, xScale, handle } = this.props;\r\n        const circle = <circle r=\"10px\" fill=\"#fa7070\" />\r\n        return <g className={handle} transform={`translate(${xScale(initialValue)},0)`}\r\n            onMouseOver={this.onMouseOver.bind(this)}>{circle}</g>\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        let { margins, svgDimensions, xScale, onChangeYear } = prevProps;\r\n        let mouseValue, trueMouseValue, self = this;\r\n        let handle = this.state.handle;\r\n        let minWidth = ((window.screen.width / 2 - margins.left - margins.right) / 5);\r\n        let classNames = this.state.classNames;\r\n        let sliderType = this.state.sliderType;\r\n\r\n        const drag = d3.drag()\r\n            .on(\"drag\", draged).on(\"end\", dragend);\r\n        \r\n        d3.select(\".\" + classNames.sliderGroup).call(drag);\r\n\r\n        function draged() {\r\n            mouseValue = d3.mouse(this)[0];\r\n            trueMouseValue = getTrueMouseValue(mouseValue);\r\n\r\n            handle === \"handle1\" ? h1 = mouseValue : h2 = mouseValue;\r\n\r\n            if (mouseValue > margins.left && mouseValue < (svgDimensions.width - margins.right)) {\r\n                d3.select(\".\" + self.state.handle).attr(\"transform\", \"translate(\" + mouseValue + \",0)\");\r\n                if (handle === \"handle1\") {\r\n                    tempH1 = mouseValue;\r\n                    trueYear1 = trueMouseValue;\r\n                } else {\r\n                    tempH2 = mouseValue\r\n                    trueYear2 = trueMouseValue;\r\n                }\r\n            } else {\r\n                h1 = tempH1;\r\n                h2 = tempH2;\r\n                handle === \"handle1\" ? trueMouseValue = trueYear1 : trueMouseValue = trueYear2;\r\n            }\r\n            d3.select(\".\" + classNames.rangeBarFilled).remove();\r\n            d3.select(\".\" + classNames.sliderGroup)\r\n                .insert(\"line\", \".rangeSliderAxis\")\r\n                .attr(\"x1\", h1)\r\n                .attr(\"x2\", h2)\r\n                .attr(\"y1\", 0)\r\n                .attr(\"y2\", 0)\r\n                .attr(\"class\", classNames.rangeBarFilled)\r\n\r\n        }\r\n        function dragend() {\r\n            h1 = xScale(getTrueMouseValue(tempH1));\r\n            h2 = xScale(getTrueMouseValue(tempH2));\r\n            // debugger\r\n            if (!trueMouseValue) {\r\n                mouseValue = d3.mouse(this)[0];\r\n                trueMouseValue = getTrueMouseValue(mouseValue);\r\n                console.log(trueMouseValue);\r\n            }\r\n\r\n            d3.select(\".\" + self.state.handle).attr(\"transform\", \"translate(\" + xScale(trueMouseValue) + \",0)\");\r\n            d3.select(\".\" + classNames.rangeBarFilled).remove();\r\n            d3.select(\".\" + classNames.sliderGroup)\r\n                .insert(\"line\", \".rangeSliderAxis\")\r\n                .attr(\"x1\", xScale(trueYear1))\r\n                .attr(\"x2\", xScale(trueYear2))\r\n                .attr(\"y1\", 0)\r\n                .attr(\"y2\", 0)\r\n                .attr(\"class\", classNames.rangeBarFilled);\r\n\r\n            onChangeYear(trueYear1, trueYear2);\r\n        }\r\n        function getTrueMouseValue(mouseValue) {\r\n            // don't round for floating point numbers\r\n            if (sliderType && sliderType == \"cont\") {\r\n                return xScale.invert(mouseValue)\r\n            } else {\r\n                return Math.round(xScale.invert(mouseValue));\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default Handle","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport * as d3 from \"d3\";\r\n\r\nclass Axis extends Component {\r\n    \r\n    componentDidMount() {\r\n        this.renderAxis();\r\n    }\r\n    renderAxis() {\r\n        const { svgDimensions, margins, classNames } = this.props;\r\n        // const xValue = (svgDimensions.width - margins.left - margins.right) / 10;\r\n        d3.select(this.axisElement)\r\n            .call(d3.axisBottom()\r\n                .scale(this.props.xScale)\r\n                .ticks(6)\r\n                .tickFormat(d3.format(\"\"))\r\n            )\r\n            .selectAll(\"text\")\r\n            .style(\"font-size\", \"10px\")\r\n            .style(\"fill\", \"black\");\r\n\r\n        d3.select(this.axisElement).selectAll(\"line\").attr(\"stroke\", \"black\");\r\n        d3.select(this.axisElement).select(\"path\").style(\"d\", \"none\");\r\n    }\r\n    render() {\r\n        return (\r\n            <g className=\"rangeSliderAxis\" transform=\"translate(0,10)\" ref={el => this.axisElement = el} />\r\n        )\r\n    }\r\n}\r\nexport default Axis","export default class DataManager {\r\n    static generateNodes(source_path, ego, start, end, threshold) {\r\n        let source = require('./inputs/Chirs-friends_v2.json');\r\n        let people = source.nodes;\r\n        let nodes = [ego]\r\n        let links = []\r\n\r\n        let max_count = Number.MIN_SAFE_INTEGER\r\n        let min_count = Number.MAX_SAFE_INTEGER\r\n\r\n        let max_year = Number.MIN_SAFE_INTEGER;\r\n        let min_year = Number.MAX_SAFE_INTEGER;\r\n\r\n        const COUNT_CLIP = 1000\r\n        const DECREASER = 0.01\r\n\r\n        let displayed_nodes = []\r\n        for (let index in people) {\r\n            let person = people[index]\r\n            let years = person.years\r\n\r\n            // count messages based on date range\r\n            let message_distance = 0;\r\n            let message_count = 0;\r\n            Object.keys(years).forEach(function(year) {\r\n                let current_year = parseInt(year)\r\n                if (current_year >= start  && current_year <= end) {\r\n                    message_count += years[year];\r\n                    message_distance += years[year] * year;\r\n                    if (message_distance > COUNT_CLIP) {\r\n                        message_distance = COUNT_CLIP + DECREASER * (message_distance-COUNT_CLIP);\r\n                    }\r\n                }\r\n\r\n                if (current_year > max_year) max_year = current_year;\r\n                if (current_year < min_year) min_year = current_year;\r\n            });\r\n\r\n            if (message_distance > max_count) max_count = message_distance\r\n            if (message_distance < min_count) min_count = message_distance\r\n\r\n            if (message_distance > 0) {\r\n                displayed_nodes.push(person.id);\r\n                nodes.push({\r\n                    \"id\": person.id,\r\n                    \"name\": person.name,\r\n                    \"relationship\": person.relationship,\r\n                    \"cluster\": person.cluster,\r\n                    \"message_count\": message_count\r\n                });\r\n\r\n                links.push({\r\n                    \"source\": ego.id,\r\n                    \"target\": person.id,\r\n                    \"distance\": message_distance,\r\n                    \"message_count\": message_count\r\n                });\r\n            }   \r\n        }\r\n        let max_distance = 300;\r\n        // normalise the data\r\n        for (let i = 0; i < links.length; i++) {\r\n            let cur = links[i];\r\n            cur.distance = max_distance - (((cur.distance - min_count) / (max_count - min_count)) * max_distance);\r\n        }\r\n        // let EGO_ALTER_CONST = 1;\r\n        // // normalise the data\r\n        // for (let i = 0; i < links.length; i++) {\r\n        //     let cur = links[i];\r\n        //     let normalized = ((cur.distance - min_count) / (max_count - min_count))\r\n        //     let inversed = Math.pow(normalized, -1)\r\n\r\n        //     cur.distance = inversed * EGO_ALTER_CONST / 100;\r\n        // }\r\n\r\n        // deals with alter to alter\r\n        let alter_distance = 10;\r\n        // append links given to links\r\n        let source_links = JSON.parse(JSON.stringify(source.links));\r\n\r\n        // normalise the alter links\r\n        let filtered_source_links = []\r\n        for (let i = 0; i < source_links.length; i++) {\r\n            let cur = source_links[i];\r\n            if (cur.distance >= threshold && displayed_nodes.indexOf(cur.target) >= 0 && displayed_nodes.indexOf(cur.source) >= 0) {\r\n                filtered_source_links.push(cur);\r\n                cur.distance = alter_distance - (cur.distance * alter_distance);\r\n            }\r\n        }\r\n        links = links.concat(filtered_source_links);\r\n        \r\n\r\n        \r\n        return JSON.parse(JSON.stringify({\r\n            \"nodes\": nodes, \r\n            \"links\": links, \r\n            \"max_year\": max_year, \r\n            \"min_year\": min_year\r\n        }));\r\n    }\r\n\r\n    static getMaxMinDates() {\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport Network from './Network'\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <div className='App'>\r\n          <div>\r\n            <h2>FaceNet</h2>\r\n          </div>\r\n          <div id=\"visualisation\">\r\n            <Network/>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}